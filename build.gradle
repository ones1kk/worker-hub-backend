plugins {
    id "org.springframework.boot" version "2.7.7"
    id "io.spring.dependency-management" version "1.1.0"
    id "java"
    id "jacoco"
    id "com.github.kt3k.coveralls" version "2.12.0"
}

ext {
    jacocoVersion = "0.8.8"
    commonsLang3Version = "3.12.0"
    commonsCodecVersion = "1.15"
    commonsIoVersion = "2.11.0"
    assertionsVersion = "0.0.5"
    springdocVersion = "1.6.14"
    p6SpyVersion = "1.8.1"
    querydslVersion = "5.0.0"
    h2Version = "1.4.199"
}

repositories {
    mavenCentral()
}

bootJar { enabled = false }

subprojects {
    group = "com.breakingbad.workerhub"
    version = "1.0.0"
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "jacoco"
    apply plugin: "com.github.kt3k.coveralls"

    configurations {
        all {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    def profile = project.hasProperty("profile") ? project.property("profile").toString() : "local"

    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources/env/${profile}"
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // Log4j2
        implementation "org.springframework.boot:spring-boot-starter-log4j2"

        // Assertions
        implementation "io.github.ones1kk:assertions:${assertionsVersion}"

        // Lombok
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"

        testImplementation "org.springframework.boot:spring-boot-starter-test"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(Copy).all {
        duplicatesStrategy "exclude"
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
            xml.destination file("$buildDir/jacoco/report/index.xml")
        }

        finalizedBy "jacocoTestCoverageVerification"
    }

    jacocoTestCoverageVerification {

        violationRules {
            rule {
                enabled = true
                element = "CLASS"
            }
        }
    }

    coveralls {
        jacocoReportPath "$buildDir/jacoco/report/index.xml"
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco.exec")
        }
        useJUnitPlatform()
        finalizedBy "jacocoTestReport"
    }

    task testCoverage(type: Test) {
        group "verification"
        description "Runs the unit tests with coverage"

        dependsOn(":test",
                ":jacocoTestReport",
                ":jacocoTestCoverageVerification")

        tasks["jacocoTestReport"].mustRunAfter(tasks["test"])
        tasks["jacocoTestCoverageVerification"].mustRunAfter(tasks["jacocoTestReport"])
    }
}