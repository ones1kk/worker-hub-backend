import java.nio.file.Files

plugins {
    id "org.springframework.boot" version "2.7.7"
    id "io.spring.dependency-management" version "1.1.0"
    id "java"
    id "jacoco"
}

ext {
    jacocoVersion = "0.8.8"
    commonsLang3Version = "3.12.0"
    commonsCodecVersion = "1.15"
    commonsIoVersion = "2.11.0"
    assertionsVersion = "0.0.6"
    springdocVersion = "1.6.14"
    querydslVersion = "5.0.0"
    h2Version = "1.4.199"
    retrofitVersion = "2.7.2"
    retrofitConverterVersion = "2.7.2"
    loggingInterceptorVersion = "3.9.0"
    jasyptVersion = "3.0.4"
}

repositories {
    mavenCentral()
}

bootJar { enabled = false }

def profile = project.hasProperty("profile") ? project.property("profile").toString() : "local"

subprojects {
    group = "com.breakingbad.workerhub"
    version = "1.0.0"
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "jacoco"

    configurations {
        all {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }


    sourceSets {
        main {
            resources {
                srcDirs "src/main/resources/env/${profile}"
            }
        }

        test {
            resources {
                srcDirs "src/test/resources/env/test"
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // Log4j2
        implementation "org.springframework.boot:spring-boot-starter-log4j2"

        // Assertions
        implementation "io.github.ones1kk:assertions:${assertionsVersion}"

        // Lombok
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"

        testImplementation "org.springframework.boot:spring-boot-starter-test"

        // H2
        testImplementation "com.h2database:h2:${h2Version}"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    tasks.withType(Copy).all {
        duplicatesStrategy = "exclude"
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
            html.destination file("$buildDir/jacoco/report/index.html")
            xml.destination file("$buildDir/jacoco/report/index.xml")
        }

        finalizedBy "jacocoTestCoverageVerification"
    }

    jacocoTestCoverageVerification {
        var Qdomains = []
        for (qPattern in "*.QA".."*.QZ") {
            Qdomains.add(qPattern + "*")
        }

        violationRules {
            rule {
                enabled = true
                element = "CLASS"

                excludes = [
                        "**.*Application*",
                        "**.*Config*",
                        "**.*Dto*",
                        "**.*Request*",
                        "**.*Response*",
                        "**.*Interceptor*",
                        "**.*Exception*",
                        "**.*Dto",
                ] + Qdomains
            }
        }
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco.exec")
        }
        useJUnitPlatform()
        finalizedBy "jacocoTestReport"

        // task 실행 시 Jasypt vm option 주입
        if (profile == "local") {
            def rootProjectDir = project.rootProject.rootDir.absolutePath
            def file = file("$rootProjectDir/key.properties")
            def key = Files.readString(file.toPath())
            jvmArgs "-Djasypt.encryptor.password=${key}"
        }

    }

    task testCoverage(type: Test) {
        group "verification"
        description "Runs the unit tests with coverage"

        dependsOn(":test",
                ":jacocoTestReport",
                ":jacocoTestCoverageVerification")

        tasks["jacocoTestReport"].mustRunAfter(tasks["test"])
        tasks["jacocoTestCoverageVerification"].mustRunAfter(tasks["jacocoTestReport"])
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled true
        xml.enabled true
        html.destination file("$buildDir/jacoco/report/index.html")
        xml.destination file("$buildDir/jacoco/report/index.xml")
    }

}