plugins {
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

repositories {
    mavenCentral()
}

bootJar { enabled = false }

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    group = 'com.breakingbad.workerhub'
    version = '1.0.0'
    sourceCompatibility = JavaVersion.VERSION_11

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'

        annotationProcessor 'org.projectlombok:lombok'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled false
            csv.enabled false

            html.destination file("$buildDir/jacoco/report")
        }

        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        var Qdomains = []
        for (qPattern in '*.QA'..'*.QZ') {
            Qdomains.add(qPattern + '*')
        }

        violationRules {
            rule {
                enabled = true
                element = 'CLASS'

                limit {
                    // 임시 50%, 추후 80% 이상 설정 예정
                    minimum = 0.50
                }

                excludes = [
                        '**.*Application*',
                        '**.*Config*',
                        '**.*Dto*',
                        '**.*Request*',
                        '**.*Response*',
                        '**.*Interceptor*',
                        '**.*Exception*'
                ] + Qdomains
            }
        }
    }

    test {
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacoco.exec")
        }
        useJUnitPlatform()
        finalizedBy 'jacocoTestReport'
    }

    task testCoverage(type: Test) {
        group 'verification'
        description 'Runs the unit tests with coverage'

        dependsOn(':test',
                ':jacocoTestReport',
                ':jacocoTestCoverageVerification')

        tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
        tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
    }
}